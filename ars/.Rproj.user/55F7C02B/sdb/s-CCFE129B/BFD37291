{
    "contents" : "#' ARS\n#'\n#' Adaptive rejection sampling\n#'\n#' @param n number of sample size.\n#' @param fun the density function of interest, not need to be normalized.\n#' @param fun_deriv the derivative of the density function. (optional)\n#' @param start lower bound. (optional)\n#' @param end upper bound. (optional)\n#' @param ... further arguments passed to or from other methods.\n#' @return a vector of sample from the density function with length n\n#' @author Chao Mao, Xian Shi, Chih-Hui Wang, Luyun Zhao\n#' @export\n#' @examples\n#'\n#' #Sample from normal distribution\n#' n <- 100\n#' ARS(n, dnorm)\n\nARS <- function(n, func, start=-Inf, end=Inf, fun_deriv=NULL, ...){\n  #####Need to do: check func is concave, normalize?#####\n\n  #Check if the input function\n  if(any(names(formals(func)) == \"log\")){\n    fun <- function(x){\n      func(x, ..., log=TRUE)\n    }\n  }else{\n    fun <- function(x){\n      log(func(x, ...))\n    }\n  }\n\n  #Get derivative function by Central difference\n  if(is.null(fun_deriv)){\n    h <- 1e-8\n    fun_deriv <- function(x){\n      (fun(x + h) - fun(x - h))/(2*h)\n    }\n  }\n\n  ######Question: sorted?#####\n  #Initial Value\n  mat <- InitTk(fun, fun_deriv, start, end)\n  Tk <- mat[1,]\n\n  #Set up\n  result <- rep(0, n)\n  size <- 1\n\n  #Generate u\n  uk <- generate_u(Tk, fun, fun_deriv, start, end)\n\n  #Matrix used for checking concavity\n  mat <- cbind(Tk, fun(Tk), fun_deriv(Tk))\n\n  while (size <= n){\n    #Sample from s(x)\n    y <- runif(1)\n    x.temp <- sample_x(uk, y)\n\n    #Compute upper and lower value\n    u.x <- eval_u(x.temp, uk)\n    l.x <- eval_l(x.temp, Tk, fun)\n\n    #Uniform random number to decide wether accept or reject\n    w=runif(1)\n    if(w <= exp(l.x - u.x)){\n      #Accept\n      result[size] <- x.temp\n      size <- size + 1\n    }else{\n      if(w <= exp(fun(x.temp) - u.x)){\n        #Accept\n        result[size] <- x.temp\n        size <- size + 1\n      }\n      #Reject, Update point\n      mat <- rbind(mat, c(x.temp, fun(x.temp), fun_deriv(x.temp)))\n      #Sort by Tk\n      mat <- mat[order(mat[, 1]), ]\n      Tk <- mat[, 1]\n\n      uk <- generate_u(Tk, fun, fun_deriv, start, end)\n      ##generate h.x and h.dev for checking concavity\n      ######check concavity#####\n      h.dev <- mat[,3]\n      if (all(diff(h.dev)<=0)==FALSE){\n        stop(\"Not log concave!\")\n      }\n    }\n  }\n  return(result)\n}\n",
    "created" : 1449784926633.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3972996400",
    "id" : "BFD37291",
    "lastKnownWriteTime" : 1449785710,
    "path" : "~/ars/R/ARS.R",
    "project_path" : "R/ARS.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 5,
    "source_on_save" : false,
    "type" : "r_source"
}